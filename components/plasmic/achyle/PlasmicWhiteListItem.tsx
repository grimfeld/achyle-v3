// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 9mqNJRrUCJdF1Qi4kUEnK1
// Component: 3Cts4VO6UT
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Paragraph from "../../Paragraph"; // plasmic-import: ds4yKdokUn/component

import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "../achyle_2/plasmic_achyle_2.module.css"; // plasmic-import: 9mqNJRrUCJdF1Qi4kUEnK1/projectcss
import * as sty from "./PlasmicWhiteListItem.module.css"; // plasmic-import: 3Cts4VO6UT/css

import ListStyleWhiteIcon from "../achyle_2/icons/PlasmicIcon__ListStyleWhite"; // plasmic-import: zxnLx8ips/icon

export type PlasmicWhiteListItem__VariantMembers = {};

export type PlasmicWhiteListItem__VariantsArgs = {};
type VariantPropType = keyof PlasmicWhiteListItem__VariantsArgs;
export const PlasmicWhiteListItem__VariantProps = new Array<VariantPropType>();

export type PlasmicWhiteListItem__ArgsType = {
  children?: React.ReactNode;
};

type ArgPropType = keyof PlasmicWhiteListItem__ArgsType;
export const PlasmicWhiteListItem__ArgProps = new Array<ArgPropType>(
  "children"
);

export type PlasmicWhiteListItem__OverridesType = {
  root?: p.Flex<"div">;
  svg?: p.Flex<"svg">;
};

export interface DefaultWhiteListItemProps {
  children?: React.ReactNode;
  className?: string;
}

function PlasmicWhiteListItem__RenderFunc(props: {
  variants: PlasmicWhiteListItem__VariantsArgs;
  args: PlasmicWhiteListItem__ArgsType;
  overrides: PlasmicWhiteListItem__OverridesType;
  dataFetches?: PlasmicWhiteListItem__Fetches;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode, dataFetches } = props;

  const [isRootHover, triggerRootHoverProps] = useTrigger("useHover", {});
  const triggers = {
    hover_root: isRootHover
  };

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        defaultcss.all,
        projectcss.all,
        projectcss.root_reset,
        sty.root
      )}
      data-plasmic-trigger-props={[triggerRootHoverProps]}
    >
      {(triggers.hover_root ? true : true) ? (
        <ListStyleWhiteIcon
          data-plasmic-name={"svg"}
          data-plasmic-override={overrides.svg}
          className={classNames(defaultcss.all, projectcss.all, sty.svg)}
          role={"img"}
        />
      ) : null}
      {p.renderPlasmicSlot({
        defaultContents: (
          <Paragraph
            className={classNames("__wab_instance", sty.paragraph___8FZlh)}
            dark={"dark" as const}
          >
            <div
              className={classNames(
                defaultcss.all,
                projectcss.all,
                defaultcss.__wab_text,
                sty.text__xlXuM
              )}
            >
              {"Réalisez et complétez vos formulaires"}
            </div>
          </Paragraph>
        ),

        value: args.children
      })}
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "svg"],
  svg: ["svg"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  svg: "svg";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicWhiteListItem__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicWhiteListItem__VariantsArgs;
    args?: PlasmicWhiteListItem__ArgsType;
    overrides?: NodeOverridesType<T>;
    dataFetches?: PlasmicWhiteListItem__Fetches;
  } & Omit<PlasmicWhiteListItem__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicWhiteListItem__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicWhiteListItem__ArgProps,
      internalVariantPropNames: PlasmicWhiteListItem__VariantProps
    });

    const { dataFetches } = props;

    return PlasmicWhiteListItem__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicWhiteListItem";
  } else {
    func.displayName = `PlasmicWhiteListItem.${nodeName}`;
  }
  return func;
}

export const PlasmicWhiteListItem = Object.assign(
  // Top-level PlasmicWhiteListItem renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    svg: makeNodeComponent("svg"),

    // Metadata about props expected for PlasmicWhiteListItem
    internalVariantProps: PlasmicWhiteListItem__VariantProps,
    internalArgProps: PlasmicWhiteListItem__ArgProps
  }
);

export default PlasmicWhiteListItem;
/* prettier-ignore-end */
