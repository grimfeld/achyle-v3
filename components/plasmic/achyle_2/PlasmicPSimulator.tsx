// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 9mqNJRrUCJdF1Qi4kUEnK1
// Component: HMhxayluTN
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import ListItem from "../../ListItem"; // plasmic-import: xUitMmxl0F/component
import Paragraph from "../../Paragraph"; // plasmic-import: ds4yKdokUn/component
import { InputRange } from "../../InputRange"; // plasmic-import: XG5PDl0Ndj/codeComponent
import Divider from "../../Divider"; // plasmic-import: 79e3ncUiiG/component
import Heading from "../../Heading"; // plasmic-import: iLkYtMJ5YQ/component

import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_achyle_2.module.css"; // plasmic-import: 9mqNJRrUCJdF1Qi4kUEnK1/projectcss
import * as sty from "./PlasmicPSimulator.module.css"; // plasmic-import: HMhxayluTN/css

import TimeIcon from "./icons/PlasmicIcon__Time"; // plasmic-import: uWFrTHISq/icon
import CalendarIcon from "./icons/PlasmicIcon__Calendar"; // plasmic-import: p1duHFCHl/icon

export type PlasmicPSimulator__VariantMembers = {};

export type PlasmicPSimulator__VariantsArgs = {};
type VariantPropType = keyof PlasmicPSimulator__VariantsArgs;
export const PlasmicPSimulator__VariantProps = new Array<VariantPropType>();

export type PlasmicPSimulator__ArgsType = {
  hoursPerMonth?: React.ReactNode;
  hoursPerYear?: React.ReactNode;
  children?: React.ReactNode;
};

type ArgPropType = keyof PlasmicPSimulator__ArgsType;
export const PlasmicPSimulator__ArgProps = new Array<ArgPropType>(
  "hoursPerMonth",
  "hoursPerYear",
  "children"
);

export type PlasmicPSimulator__OverridesType = {
  root?: p.Flex<"div">;
  divider?: p.Flex<typeof Divider>;
};

export interface DefaultPSimulatorProps {
  hoursPerMonth?: React.ReactNode;
  hoursPerYear?: React.ReactNode;
  children?: React.ReactNode;
  className?: string;
}

function PlasmicPSimulator__RenderFunc(props: {
  variants: PlasmicPSimulator__VariantsArgs;
  args: PlasmicPSimulator__ArgsType;
  overrides: PlasmicPSimulator__OverridesType;
  dataFetches?: PlasmicPSimulator__Fetches;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode, dataFetches } = props;

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        defaultcss.all,
        projectcss.all,
        projectcss.root_reset,
        sty.root
      )}
    >
      <div
        className={classNames(
          defaultcss.all,
          projectcss.all,
          sty.freeBox__wqEe9
        )}
      >
        <ListItem className={classNames("__wab_instance", sty.listItem__nTdG7)}>
          <Paragraph
            className={classNames("__wab_instance", sty.paragraph__jeKrz)}
            dark={"dark" as const}
          >
            <div
              className={classNames(
                defaultcss.all,
                projectcss.all,
                defaultcss.__wab_text,
                sty.text__zwRc4
              )}
            >
              {"Combien de contrats récurrents rédigez-vous par mois ?"}
            </div>
          </Paragraph>
        </ListItem>

        <InputRange
          className={classNames("__wab_instance", sty.inputRange__uHssg)}
        />
      </div>

      <div
        className={classNames(
          defaultcss.all,
          projectcss.all,
          sty.freeBox__kxSrr
        )}
      >
        <ListItem className={classNames("__wab_instance", sty.listItem__owfl6)}>
          <Paragraph
            className={classNames("__wab_instance", sty.paragraph__rrCcN)}
            dark={"dark" as const}
          >
            <div
              className={classNames(
                defaultcss.all,
                projectcss.all,
                defaultcss.__wab_text,
                sty.text__t2Y06
              )}
            >
              {
                "Sans Achyle, combien de temps vous faut-il pour rédiger ces contrats ?"
              }
            </div>
          </Paragraph>
        </ListItem>

        <InputRange
          className={classNames("__wab_instance", sty.inputRange__vomqi)}
        />
      </div>

      <Divider
        data-plasmic-name={"divider"}
        data-plasmic-override={overrides.divider}
        className={classNames("__wab_instance", sty.divider)}
      />

      <ListItem className={classNames("__wab_instance", sty.listItem__raYka)}>
        <Paragraph
          className={classNames("__wab_instance", sty.paragraph___0Sc7N)}
          dark={"dark" as const}
        >
          <div
            className={classNames(
              defaultcss.all,
              projectcss.all,
              defaultcss.__wab_text,
              sty.text__cZw6
            )}
          >
            {"Nombre d’heures gagnées avec Achyle"}
          </div>
        </Paragraph>
      </ListItem>

      <p.Stack
        as={"div"}
        hasGap={true}
        className={classNames(
          defaultcss.all,
          projectcss.all,
          sty.freeBox__wWqh
        )}
      >
        <div
          className={classNames(
            defaultcss.all,
            projectcss.all,
            sty.freeBox___0R7Li
          )}
        >
          <TimeIcon
            className={classNames(
              defaultcss.all,
              projectcss.all,
              sty.svg__mnMyO
            )}
            role={"img"}
          />

          <div
            className={classNames(
              defaultcss.all,
              projectcss.all,
              sty.freeBox__k4CNb
            )}
          >
            <Heading
              className={classNames("__wab_instance", sty.heading__irv17)}
              content={p.renderPlasmicSlot({
                defaultContents: (
                  <div
                    className={classNames(
                      defaultcss.all,
                      projectcss.all,
                      defaultcss.__wab_text,
                      sty.text__x5PnZ
                    )}
                  >
                    {"35"}
                  </div>
                ),

                value: args.hoursPerMonth
              })}
              dark={"dark" as const}
            />

            <Paragraph
              className={classNames("__wab_instance", sty.paragraph__qzffm)}
              dark={"dark" as const}
            >
              {"Heures / mois"}
            </Paragraph>
          </div>
        </div>

        <div
          className={classNames(
            defaultcss.all,
            projectcss.all,
            sty.freeBox__pvtfR
          )}
        >
          <CalendarIcon
            className={classNames(
              defaultcss.all,
              projectcss.all,
              sty.svg__lTj5R
            )}
            role={"img"}
          />

          <div
            className={classNames(
              defaultcss.all,
              projectcss.all,
              sty.freeBox__kBa1I
            )}
          >
            <Heading
              className={classNames("__wab_instance", sty.heading__pyA9D)}
              content={p.renderPlasmicSlot({
                defaultContents: (
                  <div
                    className={classNames(
                      defaultcss.all,
                      projectcss.all,
                      defaultcss.__wab_text,
                      sty.text__qLiIp
                    )}
                  >
                    {"35"}
                  </div>
                ),

                value: args.hoursPerYear
              })}
              dark={"dark" as const}
            />

            <Paragraph
              className={classNames("__wab_instance", sty.paragraph__tnXmX)}
              dark={"dark" as const}
            >
              {p.renderPlasmicSlot({
                defaultContents: "Heures / an soit 15 jours",
                value: args.children
              })}
            </Paragraph>
          </div>
        </div>
      </p.Stack>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "divider"],
  divider: ["divider"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  divider: typeof Divider;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicPSimulator__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicPSimulator__VariantsArgs;
    args?: PlasmicPSimulator__ArgsType;
    overrides?: NodeOverridesType<T>;
    dataFetches?: PlasmicPSimulator__Fetches;
  } & Omit<PlasmicPSimulator__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicPSimulator__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicPSimulator__ArgProps,
      internalVariantPropNames: PlasmicPSimulator__VariantProps
    });

    const { dataFetches } = props;

    return PlasmicPSimulator__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicPSimulator";
  } else {
    func.displayName = `PlasmicPSimulator.${nodeName}`;
  }
  return func;
}

export const PlasmicPSimulator = Object.assign(
  // Top-level PlasmicPSimulator renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    divider: makeNodeComponent("divider"),

    // Metadata about props expected for PlasmicPSimulator
    internalVariantProps: PlasmicPSimulator__VariantProps,
    internalArgProps: PlasmicPSimulator__ArgProps
  }
);

export default PlasmicPSimulator;
/* prettier-ignore-end */
