// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 9mqNJRrUCJdF1Qi4kUEnK1
// Component: lXfsMEnWoU
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Heading from "../../Heading"; // plasmic-import: iLkYtMJ5YQ/component
import Paragraph from "../../Paragraph"; // plasmic-import: ds4yKdokUn/component

import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_achyle_2.module.css"; // plasmic-import: 9mqNJRrUCJdF1Qi4kUEnK1/projectcss
import * as sty from "./PlasmicPill.module.css"; // plasmic-import: lXfsMEnWoU/css

import ContractIcon from "./icons/PlasmicIcon__Contract"; // plasmic-import: fMAKgq5kC/icon
import DoubleCirclesIcon from "./icons/PlasmicIcon__DoubleCircles"; // plasmic-import: GTTxKOnNw/icon
import _9BranchesStarIcon from "./icons/PlasmicIcon___9BranchesStar"; // plasmic-import: J71R-Vsqa/icon

export type PlasmicPill__VariantMembers = {
  circleVariant: "circleVariant";
  starVariant: "starVariant";
};

export type PlasmicPill__VariantsArgs = {
  circleVariant?: SingleBooleanChoiceArg<"circleVariant">;
  starVariant?: SingleBooleanChoiceArg<"starVariant">;
};

type VariantPropType = keyof PlasmicPill__VariantsArgs;
export const PlasmicPill__VariantProps = new Array<VariantPropType>(
  "circleVariant",
  "starVariant"
);

export type PlasmicPill__ArgsType = {
  icon?: React.ReactNode;
  title?: React.ReactNode;
  text?: React.ReactNode;
};

type ArgPropType = keyof PlasmicPill__ArgsType;
export const PlasmicPill__ArgProps = new Array<ArgPropType>(
  "icon",
  "title",
  "text"
);

export type PlasmicPill__OverridesType = {
  root?: p.Flex<"div">;
  freeBox?: p.Flex<"div">;
};

export interface DefaultPillProps {
  icon?: React.ReactNode;
  title?: React.ReactNode;
  text?: React.ReactNode;
  circleVariant?: SingleBooleanChoiceArg<"circleVariant">;
  starVariant?: SingleBooleanChoiceArg<"starVariant">;
  className?: string;
}

function PlasmicPill__RenderFunc(props: {
  variants: PlasmicPill__VariantsArgs;
  args: PlasmicPill__ArgsType;
  overrides: PlasmicPill__OverridesType;
  dataFetches?: PlasmicPill__Fetches;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode, dataFetches } = props;

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        defaultcss.all,
        projectcss.all,
        projectcss.root_reset,
        sty.root,
        {
          [sty.root__circleVariant]: hasVariant(
            variants,
            "circleVariant",
            "circleVariant"
          )
        }
      )}
    >
      <div
        data-plasmic-name={"freeBox"}
        data-plasmic-override={overrides.freeBox}
        className={classNames(defaultcss.all, projectcss.all, sty.freeBox, {
          [sty.freeBox__circleVariant]: hasVariant(
            variants,
            "circleVariant",
            "circleVariant"
          )
        })}
      >
        {p.renderPlasmicSlot({
          defaultContents: (
            <ContractIcon
              className={classNames(
                defaultcss.all,
                projectcss.all,
                sty.svg___6On80
              )}
              role={"img"}
            />
          ),

          value: args.icon
        })}

        {p.renderPlasmicSlot({
          defaultContents: (
            <Heading
              className={classNames("__wab_instance", sty.heading__cfwWt)}
              content={
                <div
                  className={classNames(
                    defaultcss.all,
                    projectcss.all,
                    defaultcss.__wab_text,
                    sty.text___9QpDz
                  )}
                >
                  {"Heading"}
                </div>
              }
              dark={"dark" as const}
            />
          ),

          value: args.title
        })}

        {p.renderPlasmicSlot({
          defaultContents: (
            <Paragraph
              className={classNames("__wab_instance", sty.paragraph__ocHSe)}
              dark={"dark" as const}
            />
          ),

          value: args.text
        })}
      </div>

      {(
        hasVariant(variants, "circleVariant", "circleVariant") ? true : true
      ) ? (
        <DoubleCirclesIcon
          className={classNames(
            defaultcss.all,
            projectcss.all,
            sty.svg___9VFia,
            {
              [sty.svg__circleVariant___9VFiadHxsA]: hasVariant(
                variants,
                "circleVariant",
                "circleVariant"
              )
            }
          )}
          role={"img"}
        />
      ) : null}
      {(hasVariant(variants, "starVariant", "starVariant") ? true : true) ? (
        <_9BranchesStarIcon
          className={classNames(defaultcss.all, projectcss.all, sty.svg__uoYd, {
            [sty.svg__starVariant__uoYdTctkj]: hasVariant(
              variants,
              "starVariant",
              "starVariant"
            )
          })}
          role={"img"}
        />
      ) : null}
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "freeBox"],
  freeBox: ["freeBox"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  freeBox: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicPill__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicPill__VariantsArgs;
    args?: PlasmicPill__ArgsType;
    overrides?: NodeOverridesType<T>;
    dataFetches?: PlasmicPill__Fetches;
  } & Omit<PlasmicPill__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicPill__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicPill__ArgProps,
      internalVariantPropNames: PlasmicPill__VariantProps
    });

    const { dataFetches } = props;

    return PlasmicPill__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicPill";
  } else {
    func.displayName = `PlasmicPill.${nodeName}`;
  }
  return func;
}

export const PlasmicPill = Object.assign(
  // Top-level PlasmicPill renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    freeBox: makeNodeComponent("freeBox"),

    // Metadata about props expected for PlasmicPill
    internalVariantProps: PlasmicPill__VariantProps,
    internalArgProps: PlasmicPill__ArgProps
  }
);

export default PlasmicPill;
/* prettier-ignore-end */
