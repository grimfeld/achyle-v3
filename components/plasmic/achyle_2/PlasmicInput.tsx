// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 9mqNJRrUCJdF1Qi4kUEnK1
// Component: UoBPAHd4v2
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";

import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_achyle_2.module.css"; // plasmic-import: 9mqNJRrUCJdF1Qi4kUEnK1/projectcss
import * as sty from "./PlasmicInput.module.css"; // plasmic-import: UoBPAHd4v2/css

export type PlasmicInput__VariantMembers = {
  hasIcon: "hasIcon";
};

export type PlasmicInput__VariantsArgs = {
  hasIcon?: SingleBooleanChoiceArg<"hasIcon">;
};

type VariantPropType = keyof PlasmicInput__VariantsArgs;
export const PlasmicInput__VariantProps = new Array<VariantPropType>("hasIcon");

export type PlasmicInput__ArgsType = {
  children?: React.ReactNode;
  value?: any;
  placeholder?: string;
  type?: string;
};

type ArgPropType = keyof PlasmicInput__ArgsType;
export const PlasmicInput__ArgProps = new Array<ArgPropType>(
  "children",
  "value",
  "placeholder",
  "type"
);

export type PlasmicInput__OverridesType = {
  root?: p.Flex<"button">;
  freeBox?: p.Flex<"div">;
  undefinedInput?: p.Flex<"input">;
};

export interface DefaultInputProps {
  children?: React.ReactNode;
  value?: any;
  placeholder?: string;
  type?: string;
  hasIcon?: SingleBooleanChoiceArg<"hasIcon">;
  className?: string;
}

function PlasmicInput__RenderFunc(props: {
  variants: PlasmicInput__VariantsArgs;
  args: PlasmicInput__ArgsType;
  overrides: PlasmicInput__OverridesType;
  dataFetches?: PlasmicInput__Fetches;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode, dataFetches } = props;

  return (
    <button
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        defaultcss.button,
        projectcss.button,
        projectcss.root_reset,
        sty.root,
        { [sty.root__hasIcon]: hasVariant(variants, "hasIcon", "hasIcon") }
      )}
    >
      {(hasVariant(variants, "hasIcon", "hasIcon") ? true : false) ? (
        <div
          data-plasmic-name={"freeBox"}
          data-plasmic-override={overrides.freeBox}
          className={classNames(defaultcss.all, projectcss.all, sty.freeBox, {
            [sty.freeBox__hasIcon]: hasVariant(variants, "hasIcon", "hasIcon")
          })}
        >
          {true
            ? p.renderPlasmicSlot({
                defaultContents: true ? (
                  <svg
                    className={classNames(
                      defaultcss.all,
                      projectcss.all,
                      sty.svg___6XGtK
                    )}
                    role={"img"}
                  />
                ) : null,
                value: args.children
              })
            : null}
        </div>
      ) : null}

      <input
        data-plasmic-name={"undefinedInput"}
        data-plasmic-override={overrides.undefinedInput}
        className={classNames(
          defaultcss.input,
          projectcss.input,
          sty.undefinedInput,
          {
            [sty.undefinedInput__hasIcon]: hasVariant(
              variants,
              "hasIcon",
              "hasIcon"
            )
          }
        )}
        disabled={false}
        placeholder={
          args.placeholder !== undefined
            ? args.placeholder
            : ("Placeholder" as const)
        }
        size={1 as const}
        type={args.type}
        value={args.value}
      />
    </button>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "freeBox", "undefinedInput"],
  freeBox: ["freeBox"],
  undefinedInput: ["undefinedInput"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "button";
  freeBox: "div";
  undefinedInput: "input";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicInput__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicInput__VariantsArgs;
    args?: PlasmicInput__ArgsType;
    overrides?: NodeOverridesType<T>;
    dataFetches?: PlasmicInput__Fetches;
  } & Omit<PlasmicInput__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicInput__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicInput__ArgProps,
      internalVariantPropNames: PlasmicInput__VariantProps
    });

    const { dataFetches } = props;

    return PlasmicInput__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicInput";
  } else {
    func.displayName = `PlasmicInput.${nodeName}`;
  }
  return func;
}

export const PlasmicInput = Object.assign(
  // Top-level PlasmicInput renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    freeBox: makeNodeComponent("freeBox"),
    undefinedInput: makeNodeComponent("undefinedInput"),

    // Metadata about props expected for PlasmicInput
    internalVariantProps: PlasmicInput__VariantProps,
    internalArgProps: PlasmicInput__ArgProps
  }
);

export default PlasmicInput;
/* prettier-ignore-end */
